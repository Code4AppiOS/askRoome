<style lang="less">
 .detail {
  height: 100%;
  width: 100%;
  .detail-img {
    width: 100%;
    height: 150px;
    image {
      width: 100%;
      height: 100%;
    }
  }
  .detail-title {
      padding: 20px;
      font-size: 18px;
      border-bottom: 1px solid #e2e2e2;
  }
  .detail-art {
    .detail-tro {
      padding: 15px 0 10px 15px;
      font-size: 15px;
      .detail-tro-img {}
      .detail-tro-chm {}
    }
    .detail-tro-art {
      padding: 0 15px;
      font-size: 15px;
      color: gray;
      text-align: left;
    }
  }
 }
</style>

<template>
  <view class="detail">
    <view class="detail-img">
      <image src="{{imgUrls}}"></image>
    </view>
    <view class="detail-title">
      {{title}}
    </view>
    <view class="detail-art">
      <view class="detail-tro">
        <div class="detail-tro-img"></div>
        <div class="detail-tro-chm">{{chm}}</div>
      </view>
      <view class="detail-tro-art">{{art}}</view>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import moduleA from 'module-a' // aliasFields ignore module example
  import testMixin from '../mixins/test'

  console.log('moduleA ignored: ', moduleA) // => moduleA ignored: {}


  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '详情'
    }
    components = {
     
    }

    mixins = [testMixin]

    data = {
      imgUrls: 'http://img02.tooopen.com/images/20150928/tooopen_sy_143912755726.jpg',
      title: '服务介绍',
      chm: '专家简介',
      art: '事件模型是前端 JavaScript里面最重要的一个部分avaScript里面最重要的一个部分avaScript里面最重要的一个部分avaScript里面最重要的一个部分avaScript里面最重要的一个部分avaScript里面最重要的一个部分，一直以来我都是一知半解，今天特意专门学习了一下，发现遍地的坑，于是写下这篇文章。实际上，JavaScript 的事件模型其实是观察者模式，或者又叫做发布订阅者模式（Publish/Subscribe），我们（订阅者）事先订阅（监听）某个对象的某个事件，当发布者触发该事件的时候，订阅者就可以获得通知。前端中，除了原生事件以外，MutationObserver 也是观察者模式，在这里就不细讲，我们开始来研究 JavaScript 的事件模型。事件模型受制于历史原因，当时的浏览器大厂 Netscape 主张捕获方式，而微软的 IE 主张冒泡方式。后来 W3C 为了兼容已有的代码，平息这场战争，制定了统一的标准——先捕获再冒泡。于是乎，就有了三种事件模型，这里来一一讲述：DOM 0级模型这个模型所有的浏览器都兼容，也是最简单的事件绑定模型，有两种方式可以实现：'
    }

    computed = {
     
    }

    methods = {
     
    }

    events = {
      
    }

    onLoad() {
      
    }
  }
</script>
